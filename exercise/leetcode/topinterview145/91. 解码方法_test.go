package topinterview145

/**
一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：

"1" -> 'A'

"2" -> 'B'

...

"25" -> 'Y'

"26" -> 'Z'

然而，在 解码 已编码的消息时，你意识到有许多不同的方式来解码，因为有些编码被包含在其它编码当中（"2" 和 "5" 与 "25"）。

例如，"11106" 可以映射为：

"AAJF" ，将消息分组为 (1, 1, 10, 6)
"KJF" ，将消息分组为 (11, 10, 6)
消息不能分组为  (1, 11, 06) ，因为 "06" 不是一个合法编码（只有 "6" 是合法的）。
注意，可能存在无法解码的字符串。

给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。如果没有合法的方式解码整个字符串，返回 0。

题目数据保证答案肯定是一个 32 位 的整数。



示例 1：

输入：s = "12"
输出：2
解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
示例 2：

输入：s = "226"
输出：3
解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
示例 3：

输入：s = "06"
输出：0
解释："06" 无法映射到 "F" ，因为存在前导零（"6" 和 "06" 并不等价）。


提示：

1 <= s.length <= 100
s 只包含数字，并且可能包含前导零。
*/

/*
*
第一反应又是回溯，试试看
又不会写。

---
动态规划
dp，其中 dp[i] 表示前 i 个字符的解码方式总数（s[0...i-1]）。
状态转移方程基于：
s[i-1] 是否是合法的单个数字（1~9）。
s[i-2:i] 是否是合法的双位数字（10~26）。
dp[0], dp[1] = 1, 1  // dp[0]: 空串；dp[1]: 第一个字符的解码方式

if s[i-1] != '0':

	dp[i] += dp[i-1]        // 单字符合法

if s[i-2:i] in ["10"..."26"]:

	dp[i] += dp[i-2]        // 双字符合法

n := len(s)

	if n == 0 || s[0] == '0' {
	    return 0
	}
*/
func numDecodings(s string) int {

	count := 0
	var dfs func(start int)
	dfs = func(start int) {
		if start == len(s) {
			count++
		}
		for i := start; i < len(s); i++ {
			dfs(i)
		}

	}

	return 0
}
