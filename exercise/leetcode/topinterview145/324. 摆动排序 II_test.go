package topinterview145

/**
给你一个整数数组 nums，将它重新排列成 nums[0] < nums[1] > nums[2] < nums[3]... 的顺序。

你可以假设所有输入数组都可以得到满足题目要求的结果。



示例 1：

输入：nums = [1,5,1,1,6,4]
输出：[1,6,1,5,1,4]
解释：[1,4,1,5,1,6] 同样是符合题目要求的结果，可以被判题程序接受。
示例 2：

输入：nums = [1,3,2,2,3,1]
输出：[2,3,1,3,1,2]


提示：

1 <= nums.length <= 5 * 104
0 <= nums[i] <= 5000
题目数据保证，对于给定的输入 nums ，总能产生满足题目要求的结果


进阶：你能用 O(n) 时间复杂度和 / 或原地 O(1) 额外空间来实现吗？
*/
/**
题解

排序 + 交错填充
步骤：
1. 排序原数组（升序）；
2.将排好序的数组，从后往前分成两半：
	- 一半放在 奇数位置（大的数）；
	- 另一半放在 偶数位置（小的数）；
3. 为什么这么做？
这样能保证 小 < 大 > 小 < 大 的交错结构。

📦 示例：
输入：[1, 5, 1, 1, 6, 4]
排序后：[1, 1, 1, 4, 5, 6]

奇数位放较大的数 → 从尾巴开始：[6, 5, 4]
偶数位放较小的数 → 剩下部分：[1, 1, 1]

最终交替填充结果：
偶数位(0,2,4): 1 1 1
奇数位(1,3,5): 6 5 4
=> [1,6,1,5,1,4]
*/
func wiggleSort(nums []int) {

}
