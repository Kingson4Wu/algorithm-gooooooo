package hot100

import (
	"fmt"
	"testing"
)

/**
这道经典的题目终于能自己写出来了。。

时间
0 ms
击败
100%
内存
1.9 MB
击败
38.9%

输入
nums =
[2,1]
添加到测试用例
输出
1
预期结果
2
*/

/*
*
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1：

输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。

	偷窃到的最高金额 = 1 + 3 = 4 。

示例 2：

输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。

	偷窃到的最高金额 = 2 + 9 + 1 = 12 。
*/
func rob(nums []int) int {
	if len(nums) == 1 {
		return nums[0]
	}
	dp := make([]int, len(nums))
	dp[0] = nums[0]
	dp[1] = max(nums[0], nums[1])
	for i := 2; i < len(nums); i++ {
		dp[i] = max(dp[i-2]+nums[i], dp[i-1])
	}
	return dp[len(nums)-1]
}

func TestRob(t *testing.T) {
	fmt.Println(rob([]int{2, 1}))
	fmt.Println(rob([]int{1, 2, 3, 1}))
	fmt.Println(rob([]int{2, 7, 9, 3, 1}))
}

/**
为什么 dp[i−1] + nums[i] 是多余的？
因为：
如果 dp[i−1] 是通过跳过 nums[i−1] 得到的（例如来自 dp[i−3] + nums[i−2]），

那么你要偷 nums[i]，其实相当于从 dp[i−2] 某个合法解路径里过来，只是路径绕了一点。

但你别忘了：
dp[i−2] 就已经包含了这些“跳过 i−1”的所有最优子结构。

所以：

✅ 如果“跳过 i−1”能带来好处，那这些路径一定已经包含在 dp[i−2] 的值中了。

换句话说：

所有合法且可能成为最优的组合，都会在 dp[i−2] + nums[i] 这个分支中被涵盖。
*/
