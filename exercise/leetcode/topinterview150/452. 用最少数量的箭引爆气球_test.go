package topinterview150

import "sort"

/*
*
有一些球形气球贴在一堵用 XY 平面表示的墙面上。墙面上的气球记录在整数数组 points ，其中points[i] = [xstart, xend] 表示水平直径在 xstart 和 xend之间的气球。你不知道气球的确切 y 坐标。

一支弓箭可以沿着 x 轴从不同点 完全垂直 地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被 引爆 。可以射出的弓箭的数量 没有限制 。 弓箭一旦被射出之后，可以无限地前进。

给你一个数组 points ，返回引爆所有气球所必须射出的 最小 弓箭数 。

示例 1：

输入：points = [[10,16],[2,8],[1,6],[7,12]]
输出：2
解释：气球可以用2支箭来爆破:
-在x = 6处射出箭，击破气球[2,8]和[1,6]。
-在x = 11处发射箭，击破气球[10,16]和[7,12]。
示例 2：

输入：points = [[1,2],[3,4],[5,6],[7,8]]
输出：4
解释：每个气球需要射出一支箭，总共需要4支箭。
示例 3：

输入：points = [[1,2],[2,3],[3,4],[4,5]]
输出：2
解释：气球可以用2支箭来爆破:
- 在x = 2处发射箭，击破气球[1,2]和[2,3]。
- 在x = 4处射出箭，击破气球[3,4]和[4,5]。
*/
/**

看题解
方法一：排序 + 贪心
一定存在一种最优（射出的箭数最小）的方法，使得每一支箭的射出位置都恰好对应着某一个气球的右边界。

1. 按每个气球的 xend 从小到大排序。
2. 从第一个气球开始，在它的 xend 位置射一箭。
3. 遍历后面的气球：
	*如果下一个气球的 xstart 小于等于 当前箭的位置，说明被当前这支箭打到了；
	*否则，它需要另一支箭，我们更新当前箭的位置为这个气球的 xend。

*/
func findMinArrowShots(points [][]int) int {

	if len(points) == 0 {
		return 0
	}
	sort.Slice(points, func(i, j int) bool {
		return points[i][1] < points[j][1]
	})
	count := 1
	maxRight := points[0][1]
	//先完第一个区间的最右端射第一箭
	for i := 1; i < len(points); i++ {
		//上一个箭打不中了，得新增一箭
		if points[i][0] > maxRight {
			count++
			maxRight = points[i][1]
		}
	}
	return count
}

/**
执行用时分布
61
ms
击败
51.62%
复杂度分析
消耗内存分布
18.37
MB
击败
39.22%
*/
